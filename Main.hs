module Main where

import System.IO
import Control.Monad
import Data.Graph
import Data.Default


type From = Int
type To = Int
type Qnt = Int
type Dest = Int

data Command = Move From To
             | Buy Qnt Dest
             | Wait
             deriving (Eq, Show)

type Zone = (Int,Gold)
type Drone = Int
type Gold = Int

data Player = Player{pid :: Int
                    ,zones :: [Zone]
                    ,gold :: Gold
                    ,drones :: [Drone]
                    }
              deriving (Eq, Show)

instance Default Player where
  def = Player (-1) [] 0 []

type Area = Tree Vertex

data GameState = GameState{turn :: Int
                          ,areas :: [Area]
                          ,allZones :: [Zone]
                          ,players :: [Player]
                          ,droneCost :: Int
                          ,myId :: Int
                          }
                 deriving (Eq, Show)

instance Default GameState where
  def = GameState 0 [] [] [] 0 (-1)

main :: IO ()
main = do
  hSetBuffering stdout NoBuffering -- DO NOT REMOVE
    
  -- Auto-generated code below aims at helping you parse
  -- the standard input according to the problem statement.
    
  input_line <- getLine
  hPutStrLn stderr input_line
  let input = words input_line
      playercount = read (input!!0) :: Int -- the amount of players (2 to 4)
      myid = read (input!!1) :: Int -- my player ID (0, 1, 2 or 3)
      zonecount = read (input!!2) :: Int -- the amount of zones on the map
      linkcount = read (input!!3) :: Int -- the amount of links between all zones

  
  zones <- replicateM zonecount $ do
    input_line <- getLine
    --hPutStrLn stderr input_line
    let input = words input_line
        zoneid = read (input!!0) :: Int -- this zone's ID (between 0 and zoneCount-1)
        platinumsource = read (input!!1) :: Int -- the amount of Platinum this zone can provide per game turn
    return (zoneid,platinumsource)
    
  edges <- replicateM linkcount $ do
    input_line <- getLine
    --hPutStrLn stderr input_line
    let input = words input_line
        zone1 = read (input!!0) :: Int
        zone2 = read (input!!1) :: Int
    return (zone1,zone2) --[(zone1, zone2),(zone2,zone1)]
  let field = buildG (0,zonecount-1) (edges)
--      areas = dff field
--  print (edges)
--  print areas
  putStrLn "Start game loop"
  loop def{areas=dff field, allZones=zones}

loop :: GameState -> IO ()
loop st = do
  let zonecount = length $ allZones st
  print zonecount
{--
  input_line <- getLine
  let platinum = read input_line :: Int -- my available Platinum
      zonecount = length $ areas st
  replicateM zonecount $ do
    input_line <- getLine
    let input = words input_line
        zid = read (input!!0) :: Int -- this zone's ID
        ownerid = read (input!!1) :: Int -- the player who owns this zone (-1 otherwise)
        podsp0 = read (input!!2) :: Int -- player 0's PODs on this zone
        podsp1 = read (input!!3) :: Int -- player 1's PODs on this zone
        podsp2 = read (input!!4) :: Int -- player 2's PODs on this zone (always 0 for a two player game)
        podsp3 = read (input!!5) :: Int -- player 3's PODs on this zone (always 0 for a two or three player game)
    return ()
    
    -- hPutStrLn stderr "Debug messages..."
    
    -- first line for movement commands, second line for POD purchase (see the protocol in the statement for details)
  putStrLn "WAIT"
  putStrLn "1 73"
--}    
  --loop st

g1 = buildG (0,153) [(21,28),(28,21)
                    ,(21,29),(29,21)
                    ,(21,22),(22,21)
                    ,(4,8),(8,4)
                    ,(4,9),(9,4)
                    ,(4,5),(5,4)
                    ,(107,108),(108,107)
                    ,(141,148),(148,141)
                    ,(122,123),(123,122)
                    ,(55,62),(62,55)
                    ,(72,73),(73,72)
                    ,(107,115),(115,107)
                    ,(55,61),(61,55)
                    ,(72,84),(84,72)
                    ,(72,83),(83,72)
                    ,(89,97),(97,89)
                    ,(107,116),(116,107)
                    ,(122,131),(131,122)
                    ,(55,56),(56,55)
                    ,(122,130),(130,122)
                    ,(141,142),(142,141)
                    ,(20,27),(27,20)
                    ,(20,28),(28,20)
                    ,(5,10),(10,5)
                    ,(20,21),(21,20)
                    ,(5,9),(9,5)
                    ,(5,6),(6,5)
                    ,(106,107),(107,106)
                    ,(54,61),(61,54)
                    ,(73,74),(74,73)
                    ,(123,124),(124,123)
                    ,(140,146),(146,140)
                    ,(140,145),(145,140)
                    ,(106,115),(115,106)
                    ,(39,40),(40,39)
                    ,(106,114),(114,106),
                   (54,60),(60,54)
                    ,(73,85),(85,73)
                    ,(73,84),(84,73)
                    ,(123,131),(131,123)
                    ,(39,44),(44,39)
                    ,(123,132),(132,123)
                    ,(54,55),(55,54)
                    ,(19,27),(27,19)
                    ,(2,3),(3,2)
                    ,(19,20),(20,19),(2,7),(7,2),(57,67),(67,57),(124,125),(125,124),(87,88),(88,87),(109,110),(110,109),(40,44),(44,40),(124,133),(133,124),(124,132),(132,124),(70,80),(80,70),(139,140),(140,139),(40,45),(45,40),(109,117),(117,109),(70,81),(81,70),(139,145),(145,139),(109,118),(118,109),(40,41),(41,40),(3,4),(4,3),(18,24),(24,18),(3,8),(8,3),(3,7),(7,3),(56,63),(63,56),(71,72),(72,71),(125,126),(126,125),(108,109),(109,108),(86,87),(87,86),(125,133),(133,125),(138,139),(139,138),(41,45),(45,41),(138,144),(144,138),(108,117),(117,108),(41,42),(42,41),(108,116),(116,108),(56,62),(62,56),(71,83),(83,71),(71,82),(82,71),(25,26),(26,25),(8,14),(14,8),(25,31),(31,25),(25,30),(30,25),(8,9),(9,8),(8,15),(15,8),(51,56),(56,51),(68,79),(79,68),(111,119),(119,111),(34,35),(35,34),(51,55),(55,51),(145,146),(146,145),(85,96),(96,85),(85,86),(86,85),(34,42),(42,34),(111,112),(112,111),(126,127),(127,126),(68,69),(69,68),(9,15),(15,9),(24,25),(25,24),(9,10),(10,9),(24,30),(30,24),(9,16),(16,9),(110,119),(119,110),(35,36),(36,35),(50,54),(54,50),(50,55),(55,50),(69,80),(80,69),(110,118),(118,110),(127,134),(134,127),(84,95),(95,84),(69,79),(79,69),(84,96),(96,84),(50,51),(51,50),(110,111),(111,110),(84,85),(85,84),(69,70),(70,69),(144,151),(151,144),(6,10),(10,6),(6,11),(11,6),(128,137),(137,128),(83,94),(94,83),(66,76),(76,66),(83,95),(95,83),(66,77),(77,66),(53,59),(59,53),(143,150),(150,143),(128,129),(129,128),(83,84),(84,83),(7,8),(8,7),(7,13),(13,7),(22,23),(23,22),(7,14),(14,7),(22,29),(29,22),(82,93),(93,82),(129,137),(137,129),(37,43),(43,37),(82,94),(94,82),(52,53),(53,52),(142,148),(148,142),(67,78),(78,67),(52,59),(59,52),(129,130),(130,129),(82,83),(83,82),(99,100),(100,99),(63,74),(74,63),(114,120),(120,114),(80,81),(81,80),(63,73),(73,63),(114,115),(115,114),(46,48),(48,46),(97,104),(104,97),(46,47),(47,46),(99,107),(107,99),(80,92),(92,80),(99,106),(106,99),(80,91),(91,80),(46,49),(49,46),(63,64),(64,63),(29,38),(38,29),(12,18),(18,12),(115,121),(121,115),(115,120),(120,115),(98,99),(99,98),(62,73),(73,62),(62,72),(72,62),(115,116),(116,115),(81,82),(82,81),(98,106),(106,98),(81,93),(93,81),(149,150),(150,149),(98,105),(105,98),(81,92),(92,81),(47,49),(49,47),(62,63),(63,62),(132,133),(133,132),(28,38),(38,28),(13,20),(20,13),(28,29),(29,28),(13,19),(19,13),(13,14),(14,13),(65,75),(75,65),(116,117),(117,116),(101,102),(102,101),(65,76),(76,65),(116,122),(122,116),(116,121),(121,116),(95,96),(96,95),(131,132),(132,131),(65,66),(66,65),(95,103),(103,95),(48,49),(49,48),(101,109),(109,101),(146,147),(147,146),(101,108),(108,101),(78,89),(89,78),(10,17),(17,10),(27,37),(37,27),(10,11),(11,10),(10,16),(16,10),(27,28),(28,27),(64,74),(74,64),(117,118),(118,117),(79,80),(80,79),(117,123),(123,117),(117,122),(122,117),(94,95),(95,94),(100,101),(101,100),(64,75),(75,64),(147,152),(152,147),(64,65),(65,64),(130,131),(131,130),(100,108),(108,100),(79,91),(91,79),(100,107),(107,100),(94,103),(103,94),(79,90),(90,79),(94,102),(102,94),(26,31),(31,26),(26,32),(32,26),(11,12),(12,11),(11,17),(17,11),(137,142),(142,137),(93,101),(101,93),(152,153),(153,152),(103,110),(110,103),(93,102),(102,93),(76,87),(87,76),(137,141),(141,137),(103,111),(111,103),(76,88),(88,76),(59,70),(70,59),(118,123),(123,118),(93,94),(94,93),(118,124),(124,118),(76,77),(77,76),(118,119),(119,118),(59,69),(69,59),(16,22),(22,16),(33,34),(34,33),(16,17),(17,16),(33,41),(41,33),(33,42),(42,33),(16,23),(23,16),(102,109),(109,102),(92,101),(101,92),(77,88),(88,77),(136,140),(140,136),(102,110),(110,102),(92,100),(100,92),(43,46),(46,43),(119,124),(124,119),(92,93),(93,92),(119,125),(125,119),(102,103),(103,102),(58,68),(68,58),(32,33),(33,32),(17,23),(23,17),(32,41),(41,32),(32,40),(40,32),(135,136),(136,135),(120,128),(128,120),(120,129),(129,120),(61,62),(62,61),(135,140),(140,135),(105,114),(114,105),(44,45),(45,44),(91,99),(99,91),(74,85),(85,74),(91,100),(100,91),(135,139),(139,135),(74,86),(86,74),(74,75),(75,74),(120,121),(121,120),(61,71),(71,61),(105,106),(106,105),(61,72),(72,61),(91,92),(92,91),(14,15),(15,14),(14,20),(20,14),(31,32),(32,31),(1,3),(3,1),(1,2),(2,1),(14,21),(21,14),(31,39),(39,31),(31,40),(40,31),(121,130),(130,121),(60,61),(61,60),(121,129),(129,121),(75,86),(86,75),(90,99),(99,90),(134,138),(138,134),(75,87),(87,75),(104,113),(113,104),(90,98),(98,90),(121,122),(122,121),(75,76),(76,75),(90,91),(91,90),(60,71),(71,60),(15,16),(16,15),(30,31),(31,30),(15,21),(21,15),(0,1),(1,0),(15,22),(22,15),(30,39),(39,30)]

g2 = buildG (0,153) [(21,28)            ,(21,29),(21,22),(4,8),(4,9),(4,5),(107,108),(141,148),(122,123),(55,62),(72,73),(107,115),(55,61),(72,84),(72,83),(89,97),(107,116),(122,131),(55,56),(122,130),(141,142),(20,27),(20,28),(5,10),(20,21),(5,9),(5,6),(106,107),(54,61),(73,74),(123,124),(140,146),(140,145),(106,115),(39,40),(106,114),(54,60),(73,85),(73,84),(123,131),(39,44),(123,132),(54,55),(19,27),(2,3),(19,20),(2,7),(57,67),(124,125),(87,88),(109,110),(40,44),(124,133),(124,132),(70,80),(139,140),(40,45),(109,117),(70,81),(139,145),(109,118),(40,41),(3,4),(18,24),(3,8),(3,7),(56,63),(71,72),(125,126),(108,109),(86,87),(125,133),(138,139),(41,45),(138,144),(108,117),(41,42),(108,116),(56,62),(71,83),(71,82),(25,26),(8,14),(25,31),(25,30),(8,9),(8,15),(51,56),(68,79),(111,119),(34,35),(51,55),(145,146),(85,96),(85,86),(34,42),(111,112),(126,127),(68,69),(9,15),(24,25),(9,10),(24,30),(9,16),(110,119),(35,36),(50,54),(50,55),(69,80),(110,118),(127,134),(84,95),(69,79),(84,96),(50,51),(110,111),(84,85),(69,70),(144,151),(6,10),(6,11),(128,137),(83,94),(66,76),(83,95),(66,77),(53,59),(143,150),(128,129),(83,84),(7,8),(7,13),(22,23),(7,14),(22,29),(82,93),(129,137),(37,43),(82,94),(52,53),(142,148),(67,78),(52,59),(129,130),(82,83),(99,100),(63,74),(114,120),(80,81),(63,73),(114,115),(46,48),(97,104),(46,47),(99,107),(80,92),(99,106),(80,91),(46,49),(63,64),(29,38),(12,18),(115,121),(115,120),(98,99),(62,73),(62,72),(115,116),(81,82),(98,106),(81,93),(149,150),(98,105),(81,92),(47,49),(62,63),(132,133),(28,38),(13,20),(28,29),(13,19),(13,14),(65,75),(116,117),(101,102),(65,76),(116,122),(116,121),(95,96),(131,132),(65,66),(95,103),(48,49),(101,109),(146,147),(101,108),(78,89),(10,17),(27,37),(10,11),(10,16),(27,28),(64,74),(117,118),(79,80),(117,123),(117,122),(94,95),(100,101),(64,75),(147,152),(64,65),(130,131),(100,108),(79,91),(100,107),(94,103),(79,90),(94,102),(26,31),(26,32),(11,12),(11,17),(137,142),(93,101),(152,153),(103,110),(93,102),(76,87),(137,141),(103,111),(76,88),(59,70),(118,123),(93,94),(118,124),(76,77),(118,119),(59,69),(16,22),(33,34),(16,17),(33,41),(33,42),(16,23),(102,109),(92,101),(77,88),(136,140),(102,110),(92,100),(43,46),(119,124),(92,93),(119,125),(102,103),(58,68),(32,33),(17,23),(32,41),(32,40),(135,136),(120,128),(120,129),(61,62),(135,140),(105,114),(44,45),(91,99),(74,85),(91,100),(135,139),(74,86),(74,75),(120,121),(61,71),(105,106),(61,72),(91,92),(14,15),(14,20),(31,32),(1,3),(1,2),(14,21),(31,39),(31,40),(121,130),(60,61),(121,129),(75,86),(90,99),(134,138),(75,87),(104,113),(90,98),(121,122),(75,76),(90,91),(60,71),(15,16),(30,31),(15,21),(0,1),(15,22),(30,39)]
